setwd("~/GitHub/MinimalCell")
getwd()
require("grid")
rm(list=ls())
getwd()
rm(list=ls())
getwd()
setwd("~/GitHub/MinimalCell")
require("png")
require("dplyr")
require("grid")
require("vegan")
rm(list=ls())
getwd()
setwd("~/GitHub/MinimalCell")
knitr::opts_knit$set(root.dir)
knitr::opts_knit$set(root.dir="~/GitHub/MinimalCell")
rm(list=ls())
getwd()
setwd("~/GitHub/MinimalCell")
knitr::opts_knit$set(root.dir="~/GitHub/MinimalCell")
rm(list=ls())
getwd()
knitr::opts_knit$set(root.dir=normalizePath("~/GitHub/MinimalCell"))
rm(list=ls())
getwd()
knitr::opts_knit$set(root.dir=normalizePath("~/GitHub/MinimalCell"))
getwd()
rm(list=ls())
knitr::opts_knit$set(root.dir=normalizePath("~/GitHub/MinimalCell"))
setwd(knitr::opts_knit$set(root.dir=normalizePath("~/GitHub/MinimalCell")))
knitr::opts_knit$set(root.dir=normalizePath("~/GitHub/MinimalCell"))
setwd("~/GitHub/MinimalCell")
getwd()
rm(list=ls())
getwd()
knitr::opts_knit$set(root.dir=normalizePath("~/GitHub/MinimalCell"))
#setwd("~/GitHub/MinimalCell")
getwd()
rm(list=ls())
getwd()
require("png")
require("dplyr")
require("grid")
require("vegan")
knitr::opts_knit$set(root.dir=normalizePath("~/GitHub/MinimalCell"))
#setwd("~/GitHub/MinimalCell")
getwd()
rm(list=ls())
getwd()
require("png")
require("dplyr")
require("grid")
require("vegan")
source("~/.active-rstudio-document", echo=TRUE)
rm(list = ls())
knitr::opts_knit$set(root.dir=normalizePath("~/GitHub/Bifidobacterium"))
getwd()
require("png")
require("dplyr")
require("grid")
require("knitr")
require("extrafont")
require("ggrepel");
require("gridExtra")
require("contrast")
sem <- function(x) sqrt(var(x)/length(x))
cv <- function(x) (sd(x)/mean(x))*100
hplc <- read.csv("~/GitHub/Bifidobacterium/data/metabolite.flux.data.csv")
hplc$condition_short <- factor(hplc$condition_short,levels=c("GF","F"))
hplc$evo_trt <- factor(hplc$evo_trt, levels=c("F", "P", "X", "Anc"))
hplc$evo_trt_plotting <- recode(hplc$evo_trt, "F" = "DP0", "P" = "DP5", "X" = "DP24", "Anc" = "Ancestor")
hplc$evo_trt_plotting <- factor(hplc$evo_trt_plotting, levels = c("DP0", "DP5", "DP24", "Ancestor"))
grrPglcU <- read.csv("~/GitHub/Bifidobacterium/data/umax.on.P_F-evolved_glcU.vs.lacY.csv")
# test for equal variance
var.test(x = c(filter(grrPglcU, importer == "glcU")$umax_on_P),
y = c(filter(grrPglcU, importer == "lacY")$umax_on_P),
ratio = 1, alternative = "t")
# Answer: P = 0.05035; ~ homoscedastic
# Two sample t-test for differences in umax
test.umax <- t.test(x = c(filter(grrPglcU, importer == "glcU")$umax_on_P),
y = c(filter(grrPglcU, importer == "lacY")$umax_on_P), mu = 0,
alternative = "t", paired = F, var.equal = T)
# umax of lacY mutant is 4x greater than umax of glcU mutant
# t = -4.46, df = 6, p-value = 0.004283
# mean of glcU =  0.04585;  mean of lacY = 0.18530
test.import <- t.test(x = evo.glcU, y = evo.lacY, mu = 0,
alternative = "t", paired = F, var.equal = T)
# test for equal variance
var.test(x = c(filter(grrPglcU, importer == "glcU")$umax_on_P),
y = c(filter(grrPglcU, importer == "lacY")$umax_on_P),
ratio = 1, alternative = "t")
# Answer: P = 0.05035; ~ homoscedastic
# Two sample t-test for differences in umax
test.umax <- t.test(x = c(filter(grrPglcU, importer == "glcU")$umax_on_P),
y = c(filter(grrPglcU, importer == "lacY")$umax_on_P), mu = 0,
alternative = "t", paired = F, var.equal = T)
# umax of lacY mutant is 4x greater than umax of glcU mutant
# t = -4.46, df = 6, p-value = 0.004283
# mean of glcU =  0.04585;  mean of lacY = 0.18530
test.import <- t.test(x = evo.glcU, y = evo.lacY, mu = 0,
alternative = "t", paired = F, var.equal = T)
