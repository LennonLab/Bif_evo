title(ylab ="RSG value", line = 7, cex.lab = 1.2)
box()
axis(side = 1, labels = T, cex.axis = 1.25)
axis(side = 2, las = 1, cex.axis = 1.25)
par <- opar
plot.new()
rac <- RAC(x = RSG_H$`flow[, "BL1-H"]`)
ranks <- as.vector(seq(1,length(rac)))
opar <- par(no.readonly = TRUE)
par(mar = c(5.1,5.1,4.1,2.1)+0.1, mgp = c(5.1,1,0))
plot(ranks, rac, type = 'p', axes = F, xlab = "Rank in activity", ylab = "RSG value", las = 1, cex.lab = 1.2, cex.axis = 1.25)
box()
axis(side = 1, labels = T, cex.axis = 1.25)
axis(side = 2, las = 1, cex.axis = 1.25)
par <- opar
plot.new()
rac <- RAC(x = RSG_H$`flow[, "BL1-H"]`)
ranks <- as.vector(seq(1,length(rac)))
opar <- par(no.readonly = TRUE)
par(mar = c(5.1,5.1,4.1,2.1)+0.1, mgp = c(5.1,1,0))
plot(ranks, rac, type = 'p', axes = F, xlab = "Rank in activity", ylab = "RSG value", sude=2, line = 5, las = 1, cex.lab = 1.2, cex.axis = 1.25)
box()
axis(side = 1, labels = T, cex.axis = 1.25)
axis(side = 2, las = 1, cex.axis = 1.25)
par <- opar
plot.new()
rac <- RAC(x = RSG_H$`flow[, "BL1-H"]`)
ranks <- as.vector(seq(1,length(rac)))
opar <- par(no.readonly = TRUE)
par(mar = c(5.1,5.1,4.1,2.1)+0.1, mgp = c(5.1,1,0))
plot(ranks, rac, type = 'p', axes = F, xlab = "Rank in activity", ylab = "RSG value", side=2, line = 5, las = 1, cex.lab = 1.2, cex.axis = 1.25)
box()
axis(side = 1, labels = T, cex.axis = 1.25)
axis(side = 2, las = 1, cex.axis = 1.25)
par <- opar
plot.new()
rac <- RAC(x = RSG_H$`flow[, "BL1-H"]`)
ranks <- as.vector(seq(1,length(rac)))
opar <- par(no.readonly = TRUE)
par(mar = c(5.1,5.1,4.1,2.1)+0.1, mgp = c(5.1,1,0))
plot(ranks, rac, type = 'p', axes = F, xlab = "Rank in activity",las = 1, cex.lab = 1.2, cex.axis = 1.25)
mtext("RSG value", side = 2, line = 5)
box()
axis(side = 1, labels = T, cex.axis = 1.25)
axis(side = 2, las = 1, cex.axis = 1.25)
par <- opar
plot.new()
rac <- RAC(x = RSG_H$`flow[, "BL1-H"]`)
ranks <- as.vector(seq(1,length(rac)))
opar <- par(no.readonly = TRUE)
par(mar = c(5.1,5.1,4.1,2.1)+0.1, mgp = c(5.1,1,0))
plot(ranks, rac, type = 'p', axes = F, xlab = "Rank in activity", las = 1, cex.lab = 1.2, cex.axis = 1.25)
box()
axis(side = 1, labels = T, cex.axis = 1.25)
axis(side = 2, las = 1, cex.axis = 1.25)
par <- opar
plot.new()
rac <- RAC(x = RSG_H$`flow[, "BL1-H"]`)
ranks <- as.vector(seq(1,length(rac)))
opar <- par(no.readonly = TRUE)
par(mar = c(5.1,5.1,4.1,2.1)+0.1)
plot(ranks, rac, type = 'p', axes = F, xlab = "Rank in activity", las = 1, cex.lab = 1.2, cex.axis = 1.25)
box()
axis(side = 1, labels = T, cex.axis = 1.25)
axis(side = 2, las = 1, cex.axis = 1.25)
par <- opar
plot.new()
rac <- RAC(x = RSG_H$`flow[, "BL1-H"]`)
ranks <- as.vector(seq(1,length(rac)))
opar <- par(no.readonly = TRUE)
par(mar = c(5.1,5.1,4.1,2.1)+0.1)
plot(ranks, rac, type = 'p', axes = F, xlab = "Rank in activity", las = 1, cex.lab = 1.2, cex.axis = 1.25)
mtext("RSG value", side = 2, line = 5)
box()
axis(side = 1, labels = T, cex.axis = 1.25)
axis(side = 2, las = 1, cex.axis = 1.25)
par <- opar
plot.new()
rac <- RAC(x = RSG_H$`flow[, "BL1-H"]`)
ranks <- as.vector(seq(1,length(rac)))
opar <- par(no.readonly = TRUE)
par(mar = c(5.1,5.1,4.1,2.1)+0.1)
plot(ranks, rac, type = 'p', axes = F, xlab = "Rank in activity", las = 1, cex.lab = 1.2, cex.axis = 1.25)
mtext("RSG value", side = 2, line = 4)
box()
axis(side = 1, labels = T, cex.axis = 1.25)
axis(side = 2, las = 1, cex.axis = 1.25)
par <- opar
plot.new()
rac <- RAC(x = RSG_H$`flow[, "BL1-H"]`)
ranks <- as.vector(seq(1,length(rac)))
opar <- par(no.readonly = TRUE)
par(mar = c(5.1,5.1,4.1,2.1))
plot(ranks, log(rac), type = 'p', axes = F, xlab = "Rank in abundance", ylab = "log(abundance)", las = 1, cex.lab = 1.4, cex.axis = 1.25)
box()
axis(side = 1, labels = T, cex.axis = 1.25)
axis(side = 2, las = 1, cex.axis = 1.25)
par <- opar
plot.new()
rac <- RAC(x = RSG_H$`flow[, "BL1-H"]`)
ranks <- as.vector(seq(1,length(rac)))
opar <- par(no.readonly = TRUE)
par(mar = c(5.1,5.1,4.1,2.1))
plot(ranks, rac, type = 'p', axes = F, xlab = "Rank in abundance", ylab = "log(abundance)", las = 1, cex.lab = 1.4, cex.axis = 1.25)
box()
axis(side = 1, labels = T, cex.axis = 1.25)
axis(side = 2, las = 1, cex.axis = 1.25)
par <- opar
plot.new()
rac <- RAC(x = RSG_H$`flow[, "BL1-H"]`)
ranks <- as.vector(seq(1,length(rac)))
opar <- par(no.readonly = TRUE)
par(mar = c(5.1,5.1,4.1,2.1))
plot(ranks, rac, type = 'p', axes = F, xlab = "Rank in abundance", ylab = "abundance", las = 1, cex.lab = 1.4, cex.axis = 1.25)
box()
axis(side = 1, labels = T, cex.axis = 1.25)
axis(side = 2, las = 1, cex.axis = 1.25)
par <- opar
plot.new()
rac <- RAC(x = RSG_H$`flow[, "BL1-H"]`)
ranks <- as.vector(seq(1,length(rac)))
opar <- par(no.readonly = TRUE)
par(mar = c(5,6,4,2)+0.1)
plot(ranks, rac, type = 'p', axes = F, xlab = "Rank in abundance", ylab = "abundance", las = 1, cex.lab = 1.4, cex.axis = 1.25)
box()
axis(side = 1, labels = T, cex.axis = 1.25)
axis(side = 2, las = 1, cex.axis = 1.25)
par <- opar
plot.new()
rac <- RAC(x = RSG_H$`flow[, "BL1-H"]`)
ranks <- as.vector(seq(1,length(rac)))
opar <- par(no.readonly = TRUE)
par(mar = c(5,6,4,2)+0.1)
plot(ranks, rac, type = 'p', axes = F, xlab = "Rank in abundance", las = 1, cex.lab = 1.4, cex.axis = 1.25)
mtext("abundance", side = 2, line = 5)
box()
axis(side = 1, labels = T, cex.axis = 1.25)
axis(side = 2, las = 1, cex.axis = 1.25)
par <- opar
plot.new()
rac <- RAC(x = RSG_H$`flow[, "BL1-H"]`)
ranks <- as.vector(seq(1,length(rac)))
opar <- par(no.readonly = TRUE)
par(mar = c(5,6,4,2)+0.1)
plot(ranks, rac, type = 'p', axes = F, xlab = "Rank in abundance", las = 1, cex.lab = 1.4, cex.axis = 1.25)
#mtext("abundance", side = 2, line = 5)
box()
axis(side = 1, labels = T, cex.axis = 1.25)
axis(side = 2, las = 1, cex.axis = 1.25)
par <- opar
plot.new()
rac <- RAC(x = RSG_H$`flow[, "BL1-H"]`)
ranks <- as.vector(seq(1,length(rac)))
opar <- par(no.readonly = TRUE)
par(mar = c(5,6,4,2)+0.1)
plot(ranks, rac, type = 'p', axes = F, xlab = "Rank in abundance", las = 1, cex.lab = 1.4, cex.axis = 1.25)
#mtext("abundance", side = 2, line = 5)
box()
axis(side = 1, labels = T, cex.axis = 1.25)
par <- opar
plot.new()
rac <- RAC(x = RSG_H$`flow[, "BL1-H"]`)
ranks <- as.vector(seq(1,length(rac)))
opar <- par(no.readonly = TRUE)
par(mar = c(5,6,4,2)+0.1)
plot(ranks, rac, type = 'p', axes = F, xlab = "Rank in abundance", ylab = "", las = 1, cex.lab = 1.4, cex.axis = 1.25)
mtext("abundance", side = 2, line = 5)
box()
axis(side = 1, labels = T, cex.axis = 1.25)
par <- opar
plot.new()
rac <- RAC(x = RSG_H$`flow[, "BL1-H"]`)
ranks <- as.vector(seq(1,length(rac)))
opar <- par(no.readonly = TRUE)
par(mar = c(5,6,4,2)+0.1)
plot(ranks, rac, type = 'p', axes = F, xlab = "Rank in abundance", ylab = "", las = 1, cex.lab = 1.4, cex.axis = 1.25)
mtext("abundance", side = 2, line = 5)
box()
axis(side = 1, labels = T, cex.axis = 1.25)
axis(side = 2, las = 1, cex.axis = 1.25)
par <- opar
plot.new()
rac <- RAC(x = RSG_H$`flow[, "BL1-H"]`)
ranks <- as.vector(seq(1,length(rac)))
opar <- par(no.readonly = TRUE)
par(mar = c(5,6,4,2)+0.1)
plot(ranks, rac, type = 'p', axes = F, xlab = "Rank in activity", ylab = "", las = 1, cex.lab = 1.4, cex.axis = 1.25)
mtext("RSG-H value", side = 2, line = 5)
box()
axis(side = 1, labels = T, cex.axis = 1.25)
axis(side = 2, las = 1, cex.axis = 1.25)
par <- opar
plot.new()
rac <- RAC(x = RSG_H$`flow[, "BL1-H"]`)
ranks <- as.vector(seq(1,length(rac)))
opar <- par(no.readonly = TRUE)
par(mar = c(5,6,4,2)+0.1)
plot(ranks, rac, type = 'p', axes = F, xlab = "Rank in activity", ylab = "", las = 1, cex.lab = 1.4, cex.axis = 1.25)
mtext("RSG-H value", side = 2, line = 5, cex.lab = 1.4)
box()
axis(side = 1, labels = T, cex.axis = 1.25)
axis(side = 2, las = 1, cex.axis = 1.25)
par <- opar
fcs <- flowCore::read.FCS(file = "../data/B1_Live-RSG.fcs")
flow <- exprs(fcs)
RSG_H <- as.data.frame(flow[,"BL1-H"])
RAC <- function(x = ""){
x = as.vector(x)
x.ab = x[x >0]
x.ab.ranked = x.ab[order(x.ab, decreasing = TRUE)]
return(x.ab.ranked)
}
fcs <- flowCore::read.FCS(file = "../data/B1_Live-RSG.fcs")
flow <- exprs(fcs)
RSG_H <- as.matrix(flow[,"BL1-H"])
plot.new()
rac <- RAC(x = RSG_H)
ranks <- as.vector(seq(1,length(rac)))
opar <- par(no.readonly = TRUE)
par(mar = c(5,6,4,2)+0.1)
plot(ranks, rac, type = 'p', axes = F, xlab = "Rank in activity", ylab = "", las = 1, cex.lab = 1.4, cex.axis = 1.25)
mtext("RSG-H value", side = 2, line = 5, cex.lab = 1.4)
box()
axis(side = 1, labels = T, cex.axis = 1.25)
axis(side = 2, las = 1, cex.axis = 1.25)
par <- opar
fcs <- flowCore::read.FCS(file = "../data/B1_Live-RSG.fcs")
flow <- exprs(fcs)
RSG_H <- as.matrix(flow[,"FSC-H"])
plot.new()
rac <- RAC(x = RSG_H)
ranks <- as.vector(seq(1,length(rac)))
opar <- par(no.readonly = TRUE)
par(mar = c(5,6,4,2)+0.1)
plot(ranks, rac, type = 'p', axes = F, xlab = "Rank in activity", ylab = "", las = 1, cex.lab = 1.4, cex.axis = 1.25)
mtext("RSG-H value", side = 2, line = 5, cex.lab = 1.4)
box()
axis(side = 1, labels = T, cex.axis = 1.25)
axis(side = 2, las = 1, cex.axis = 1.25)
par <- opar
fcs <- flowCore::read.FCS(file = "../data/B1_Live-RSG.fcs")
flow <- exprs(fcs)
RSG_H <- as.matrix(flow[,"BL1-A"])
plot.new()
rac <- RAC(x = RSG_H)
ranks <- as.vector(seq(1,length(rac)))
opar <- par(no.readonly = TRUE)
par(mar = c(5,6,4,2)+0.1)
plot(ranks, rac, type = 'p', axes = F, xlab = "Rank in activity", ylab = "", las = 1, cex.lab = 1.4, cex.axis = 1.25)
mtext("RSG-H value", side = 2, line = 5, cex.lab = 1.4)
box()
axis(side = 1, labels = T, cex.axis = 1.25)
axis(side = 2, las = 1, cex.axis = 1.25)
par <- opar
rm(list = ls())
getwd()
install.packages("BiocManager")
library("BiocManager")
BiocManager::install("flowCore", version = "3.8")
BiocManager::install("ggcyto")
library("BiocManager")
library("flowCore")
library("ggcyto")
fcs_C1 <- flowCore::read.FCS(file = "../data/C1_Live-RSG+SA.fcs")
test1 <-(95.61, 25.12, 24.15, 58.29, 62.68, 63.66, 100.00, 92.20,33.17, 35.12, 64.63, 73.41, 83.17, 99.51, 54.15,83.17,61.95, 96.34,90.24,72.20,73.41,71.71,76.83, 82.44,92.68,74.63, 55.61,99.02,90.98,88.78,98.05,99.02,79.7682.20)
test1 <-c(95.61, 25.12, 24.15, 58.29, 62.68, 63.66, 100.00, 92.20,33.17, 35.12, 64.63, 73.41, 83.17, 99.51, 54.15,83.17,61.95, 96.34,90.24,72.20,73.41,71.71,76.83, 82.44,92.68,74.63, 55.61,99.02,90.98,88.78,98.05,99.02,79.7682.20)
test1 <-c(95.61)
test1 <-c(95.61, 25.12, 24.15, 58.29, 62.68, 63.66, 100.00, 92.20,33.17, 35.12, 64.63, 73.41, 83.17, 99.51, 54.15,83.17,61.95, 96.34,90.24,72.20,73.41,71.71,76.83, 82.44,92.68,74.63, 55.61,99.02,90.98,88.78,98.05,99.02,79.76,82.20)
test1
histogram(test1)
hist(test1)
density(test1)
test1.d<-density(test1)
plot(test1.d)
test1
mean(test1)
median(test1)
sum(test1 > 90)
11/36
sum(test1 > 80)
16/36
sum(test1 < 65)
sum(test1 > 95)
7/36
citation(MPN)
citation("MPN")
k > c(1, -1, 2, 3, -5, 0)
k -> c(1, -1, 2, 3, -5, 0)
k = c(1, -1, 2, 3, -5, 0)
k > 0
k[k < 0]
k[k > 0]
log10(2.51)
10^2.51
10^2.54
# Function to initialize the game grid with random values
initialize_grid <- function(rows, cols) {
matrix(sample(c(0, 1), rows * cols, replace = TRUE), nrow = rows, ncol = cols)
}
# Function to display the current state of the game grid
display_grid <- function(grid) {
for (i in 1:nrow(grid)) {
cat(paste(grid[i,], collapse = " "), "\n")
}
cat("\n")
}
# Function to apply the rules of the Game of Life and update the grid
update_grid <- function(grid) {
new_grid <- matrix(0, nrow = nrow(grid), ncol = ncol(grid))
for (i in 1:nrow(grid)) {
for (j in 1:ncol(grid)) {
neighbors <- sum(grid[max(i-1, 1):min(i+1, nrow(grid)), max(j-1, 1):min(j+1, ncol(grid))]) - grid[i, j]
# Apply the rules of the Game of Life
if (grid[i, j] == 1) {
if (neighbors %in% c(2, 3)) {
new_grid[i, j] <- 1
}
} else {
if (neighbors == 3) {
new_grid[i, j] <- 1
}
}
}
}
return(new_grid)
}
# Function to run the Game of Life simulation for a given number of steps
run_game_of_life <- function(rows, cols, steps) {
# Initialize the game grid
game_grid <- initialize_grid(rows, cols)
# Run the simulation for the specified number of steps
for (step in 1:steps) {
cat("Step:", step, "\n")
display_grid(game_grid)
game_grid <- update_grid(game_grid)
Sys.sleep(0.5)  # Optional: Pause for a short duration to observe the changes
}
}
# Set the size of the grid and the number of simulation steps
rows <- 10
cols <- 20
steps <- 10
# Run the Game of Life simulation
run_game_of_life(rows, cols, steps)
# Function to display the current state of the game grid as an image
display_grid_image <- function(grid) {
image(t(grid)[, nrow(grid):1], col = c("white", "black"), axes = FALSE)
}
# Function to run the Game of Life simulation for a given number of steps with visualization
run_game_of_life_with_visualization <- function(rows, cols, steps) {
# Initialize the game grid
game_grid <- initialize_grid(rows, cols)
# Set up the plot window
par(pty = "s", mar = rep(0, 4))
# Run the simulation for the specified number of steps
for (step in 1:steps) {
cat("Step:", step, "\n")
display_grid_image(game_grid)
game_grid <- update_grid(game_grid)
Sys.sleep(0.5)  # Optional: Pause for a short duration to observe the changes
}
}
# Set the size of the grid and the number of simulation steps
rows <- 10
cols <- 20
steps <- 10
# Run the Game of Life simulation with visualization
run_game_of_life_with_visualization(rows, cols, steps)
# Function to display the current state of the game grid as an image
display_grid_image <- function(grid) {
image(t(grid)[, nrow(grid):1], col = c("white", "black"), axes = FALSE)
}
# Function to run the Game of Life simulation for a given number of steps with visualization
run_game_of_life_with_visualization <- function(rows, cols, steps) {
# Initialize the game grid
game_grid <- initialize_grid(rows, cols)
# Set up the plot window
par(pty = "s", mar = rep(0, 4))
# Run the simulation for the specified number of steps
for (step in 1:steps) {
cat("Step:", step, "\n")
display_grid_image(game_grid)
game_grid <- update_grid(game_grid)
Sys.sleep(0.5)  # Optional: Pause for a short duration to observe the changes
}
}
# Set the size of the grid and the number of simulation steps
rows <- 10
cols <- 20
steps <- 10
# Run the Game of Life simulation with visualization
run_game_of_life_with_visualization(rows, cols, steps)
# Function to initialize the game grid with random values
initialize_grid <- function(rows, cols) {
matrix(sample(c(0, 1), rows * cols, replace = TRUE), nrow = rows, ncol = cols)
}
# Function to display the current state of the game grid
display_grid <- function(grid) {
for (i in 1:nrow(grid)) {
cat(paste(grid[i,], collapse = " "), "\n")
}
cat("\n")
}
# Function to apply the rules of the Game of Life and update the grid
update_grid <- function(grid) {
new_grid <- matrix(0, nrow = nrow(grid), ncol = ncol(grid))
for (i in 1:nrow(grid)) {
for (j in 1:ncol(grid)) {
neighbors <- sum(grid[max(i-1, 1):min(i+1, nrow(grid)), max(j-1, 1):min(j+1, ncol(grid))]) - grid[i, j]
# Apply the rules of the Game of Life
if (grid[i, j] == 1) {
if (neighbors %in% c(2, 3)) {
new_grid[i, j] <- 1
}
} else {
if (neighbors == 3) {
new_grid[i, j] <- 1
}
}
}
}
return(new_grid)
}
# Function to run the Game of Life simulation for a given number of steps
run_game_of_life <- function(rows, cols, steps) {
# Initialize the game grid
game_grid <- initialize_grid(rows, cols)
# Run the simulation for the specified number of steps
for (step in 1:steps) {
cat("Step:", step, "\n")
display_grid(game_grid)
game_grid <- update_grid(game_grid)
Sys.sleep(0.5)  # Optional: Pause for a short duration to observe the changes
}
}
# Set the size of the grid and the number of simulation steps
rows <- 10
cols <- 20
steps <- 100
# Run the Game of Life simulation
run_game_of_life(rows, cols, steps)
# Function to display the current state of the game grid as an image
display_grid_image <- function(grid) {
image(t(grid)[, nrow(grid):1], col = c("white", "black"), axes = FALSE)
}
# Function to run the Game of Life simulation for a given number of steps with visualization
run_game_of_life_with_visualization <- function(rows, cols, steps) {
# Initialize the game grid
game_grid <- initialize_grid(rows, cols)
# Set up the plot window
par(pty = "s", mar = rep(0, 4))
# Run the simulation for the specified number of steps
for (step in 1:steps) {
cat("Step:", step, "\n")
display_grid_image(game_grid)
game_grid <- update_grid(game_grid)
Sys.sleep(0.5)  # Optional: Pause for a short duration to observe the changes
}
}
# Set the size of the grid and the number of simulation steps
rows <- 10
cols <- 20
steps <- 100
# Run the Game of Life simulation with visualization
run_game_of_life_with_visualization(rows, cols, steps)
# Install and load required packages
if (!requireNamespace("data.table", quietly = TRUE)) {
install.packages("data.table")
}
library(data.table)
# Set parameters
trials <- 10000
max_steps <- 5000
grid_size <- 5
models <- 500
null_transients <- matrix(0, nrow = models, ncol = trials)
gol_transients <- numeric(trials)
# Time the R execution
start_time <- Sys.time()
for (i in 1:models) {
system(paste("./carust -r 3 --transient", grid_size, max_steps, trials))
system(paste("mv data/transients_", grid_size, "_", max_steps, "_", trials, ".csv data/null_2_transients_", grid_size, "_", max_steps, "_", trials, ".csv"))
file_path <- paste("data/null_2_transients_", grid_size, "_", max_steps, "_", trials, ".csv", sep = "")
data <- fread(file_path)
null_transients[i, ] <- as.numeric(data$V1)
}
if (!requireNamespace("data.table", quietly = TRUE)) {
install.packages("data.table")
}
library(data.table)
trials <- 10000
max_steps <- 5000
grid_size <- 5
models <- 500
null_transients <- matrix(0, nrow = models, ncol = trials)
gol_transients <- numeric(trials)
start_time <- Sys.time()
for (i in 1:models) {
system(paste("./carust -r 3 --transient", grid_size, max_steps, trials))
system(paste("mv data/transients_", grid_size, "_", max_steps, "_", trials, ".csv data/null_2_transients_", grid_size, "_", max_steps, "_", trials, ".csv"))
file_path <- paste("data/null_2_transients_", grid_size, "_", max_steps, "_", trials, ".csv", sep = "")
data <- fread(file_path)
null_transients[i, ] <- as.numeric(data$V1)
}
rm(list=ls())
getwd()
setwd("~/GitHub/Bifidobacterium")
require("png")
require("dplyr")
require("grid")
sem <- function(x) sqrt(var(x)/length(x))
cv <- function(x) (sd(x)/mean(x))*100
